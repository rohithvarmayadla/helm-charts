# Values for DIDComm Mediator Credo - Dev Environment
# Configured to use external PostgreSQL managed by CrunchyData Operator

replicaCount: 1

# Environment variables configured for PostgreSQL persistence
environment:
  - name: NODE_ENV
    value: "production"
  - name: LOG_LEVEL
    value: "2" # Debug level for dev
  - name: AGENT_PORT
    value: "3000"
  - name: AGENT_NAME
    value: Mediator-Dev
  # Both HTTP and WebSocket endpoints (same host, protocol auto-negotiated)
  - name: AGENT_ENDPOINTS
    value: "https://mediator-dev.trustservices.quartech.com,wss://mediator-dev.trustservices.quartech.com"
  - name: WALLET_NAME
    value: mediator-wallet

  # PostgreSQL connection configuration via HA endpoint (bypassing PgBouncer to avoid pg_hba issues)
  # Secret created by CrunchyData operator: didcomm-database-pguser-mediator
  # Application expects uppercase env vars per documentation
  - name: POSTGRES_HOST
    value: didcomm-database-ha.didcomm-mediator-dev.svc.cluster.local
  - name: POSTGRES_USER
    valueFrom:
      secretKeyRef:
        name: didcomm-database-pguser-mediator
        key: user
  - name: POSTGRES_PASSWORD
    valueFrom:
      secretKeyRef:
        name: didcomm-database-pguser-mediator
        key: password
  # Use mediator user (has CREATEDB privileges) for admin operations too
  - name: POSTGRES_ADMIN_USER
    valueFrom:
      secretKeyRef:
        name: didcomm-database-pguser-mediator
        key: user
  - name: POSTGRES_ADMIN_PASSWORD
    valueFrom:
      secretKeyRef:
        name: didcomm-database-pguser-mediator
        key: password

  # Enable PostgreSQL for pickup storage
  - name: PICKUP_TYPE
    value: "postgres"
  # QueueAndLiveModeDelivery: Tries direct delivery first, falls back to queue for resilience
  - name: PICKUP_STRATEGY
    value: QueueAndLiveModeDelivery
  # PICKUP_SETTINGS is read from secret by the helm chart template

  # Invitation Management
  # false = Use existing invitation (recommended for production)
  # true = Create new invitation on every startup (useful for testing)
  - name: CREATE_NEW_INVITATION
    value: "false"

  # Goal Code: Identifies the purpose of the mediation invitation
  # "vc.mediate" = Standard DIDComm mediation for verifiable credential workflows
  - name: GOAL_CODE
    value: "vc.mediate"

  # Push Notifications: Requires Firebase configuration (firebase-* secrets)
  # false = Disabled (mobile wallets poll for messages)
  # true = Active push to mobile devices when messages arrive
  - name: USE_PUSH_NOTIFICATIONS
    value: "false"
  - name: PUSH_NOTIFICATION_TITLE
    value: "You have a new message"
  - name: PUSH_NOTIFICATION_BODY
    value: "Open your app to read it"

# Service configuration
service:
  type: ClusterIP
  port: 3000

# Ingress configuration for external access (mobile wallets)
ingress:
  enabled: true
  className: "" # Not using className with Azure Application Gateway

  labels:
    app: didcomm-mediator

  # Azure Application Gateway annotations (matching cluster standard)
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/ssl-redirect: "true"
    appgw.ingress.kubernetes.io/request-timeout: "60"
    appgw.ingress.kubernetes.io/backend-protocol: "http"  # Backend uses HTTP, WebSocket upgrade handled automatically
    cert-manager.io/cluster-issuer: letsencrypt-prod

  # Host configuration
  hosts:
    - host: mediator-dev.trustservices.quartech.com
      paths:
        - path: /
          pathType: Prefix

  # TLS configuration (cert-manager will auto-provision certificate)
  tls:
    - secretName: mediator-dev-trustservices-tls
      hosts:
        - mediator-dev.trustservices.quartech.com

# Network policy enabled for security
networkPolicy:
  enabled: true
  ingress:
    enabled: true
    namespaceSelector: {}
    podSelector: {}

# ServiceAccount
serviceAccount:
  create: true
  automount: true

# Resource limits
resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 500m
    memory: 512Mi

# Autoscaling disabled for dev
autoscaling:
  enabled: false

# PostgreSQL network policy configuration
# This enables the mediator pods to access the PostgreSQL database
postgresql:
  enabled: true
  selectorLabels:
    postgres-operator.crunchydata.com/cluster: didcomm-database
    postgres-operator.crunchydata.com/role: master
  servicePort: 5432
